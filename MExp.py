from outsourcing_utils import RandN
import gmpy2
from gmpy2 import *
import random
import time
gmpy2.get_context().precision = 2048

blinding_pairs = [[mpz(171631500109540605675714943674514739782266958968517369588468042208044579891037291104054469978173555578000146562145144752626638290229959003431607256010033517281105340097935087137776938443375425730500131817716338834340838909943046684541035159617582690591203253769588200654656326265692092745914956763431414129228), mpz(83644446681043525220515641155669850108649334220356219248805124147483061755195780988766827609057482392146271328858287779185531256861410884809392508619872783625002490099969723193170668319577650737510059935974738585790914723058353570921731441499651209379285644983242122706297863887981310681943819688607056743511532)], [mpz(67514610635547170547107253188044915505722623161435181009571514052343354331581435654821019996680461580673232814558861563298283843646648339699191391879451223102401063029570963812508183822921735199812286348434691919466366105019214912843302040199804600878300029305692363439425555726793370601342747432071863519035), mpz(230869245080731793145270055921085281853834678736389450120988874886191234725646195451629070722412078357743884484218473830439638392122110013674877714582282026757020449790036863331631425346960553653945258772834995397437523498367230091229040002096668130657410894045890709051017126438173813855225479364310842898718805)], [mpz(128471611315531735517436067034186496971304360162978682501622487314824314521189059875918910659723775173980007581847521564611887802193903737217015365993415486459894744382250548042165652248463604633317599106686533352924180779795759284051238054923415873505695464305435286144318826018234902117026694046573491062968), mpz(246712811066638215500400814670039959373717038912322725445784885219627333190995168466871802208768985997469322757023139877905716343169518146290709852213317764001663331775430519230822319536527497490992162527111545874488407082380085003011871510893426741334363524801340712115682282817467960793227034205601535635235359)], [mpz(24667594858011696617280773636543306473746771025968843914535151067462311259319174295563107226447263722009300074440840042319821281988121397544985844979911894942490875260857947659210724364765544583769693188857390473779147216778495770303285027212392557109302836103931165909137802309493644399505873165078796987234), mpz(161752441020536746624258620208585582655704877629568517558303880624739911130654455636417200352258326852918856473203324443562784318147397645069833453245714583133770867320265950287108961588752172081835357279719248716050413937714455773303123359551638407980654549961007654679534772222087666147225435308100899541528536)], [mpz(176425598053717386321787250997242477223175649457461207510064584574987352942897032869596806199133311118675320007947592607636973306704907519850689423831550598311489805047064871551766076144564705112283697406568236367226204314952428886650330691214133108866525446422310420780887717916354115970376589186214190279043), mpz(116500879695011163219617247673516927747830911001628375991800311286064186554724964913142732511281461156436991595925438188006668004433596890245302464362061023521753790647491561947343187312234975775288424037004842748773862738476445137416763497990982057813447583137574202103694901936334752546629339326887510662540314)], [mpz(52213563952450105079227314657239710620836821832586868924873900427126064448838761512450483953380542198004648745768396359721130774362261392821446386920960544992335991068278179617498429039942420843512956232582522502863073846280701560190021804537330105093293479815198894869909617304905352453701860391487877530259), mpz(261199159236677505655484269511833888627881636868286864484499606117057445720036576622044399258827941603685763700529112148706039378979431822857451702289681796973326872747794927270017729298916067548948794079037084658066496703756268336896073584754281110982250242980863407837420780747529176699316583229858649449301022)]]



def Exp(u_list, a_list, p,q):
    blinding_pairs = []


    g1 = gmpy2.mpz(random.randint(2, p - 1))

    for i in range(6):
        g, x, X = RandN(g1, p, q)
        blinding_pairs.append([x, X])

    for kl in range(len(a_list)):
        u1 = u_list[kl]
        a1 = a_list[kl]
        w1 = gmpy2.invert(blinding_pairs[4][1], p)
        w1 = gmpy2.f_mod(gmpy2.mul(w1, u1), p)

        k1t1y1 = gmpy2.f_mod(gmpy2.mul(blinding_pairs[4][0], a1), q)
        k1t1y1 = gmpy2.f_mod(gmpy2.sub(k1t1y1, blinding_pairs[2][0]), q)
        t1y1 = gmpy2.invert(blinding_pairs[0][0], q)
        t1y1 = gmpy2.f_mod(gmpy2.mul(t1y1, k1t1y1), q)

        x1 = gmpy2.f_mod(gmpy2.sub(a1, t1y1), q)

        # Verification Key
        r = random.randint(2,11)

        v2_invert = gmpy2.invert(blinding_pairs[5][1], p)
        w2 = gmpy2.f_mod(gmpy2.mul(v2_invert, u1), p)

        k6r = gmpy2.f_mod(gmpy2.mul(blinding_pairs[5][0], r), q)
        k6ra = gmpy2.f_mod(gmpy2.mul(k6r, a1), q)
        k2t2y2 = gmpy2.f_mod(gmpy2.sub(k6ra, blinding_pairs[3][0]), q)
        k2_invert = gmpy2.invert(blinding_pairs[1][0], q)
        t2y2 = gmpy2.f_mod(gmpy2.mul(k2_invert, k2t2y2), q)

        ar = gmpy2.f_mod(gmpy2.mul(a1, r), q)
        x2 = gmpy2.f_mod(gmpy2.sub(ar, t2y2), q)

        h1w1 = gmpy2.f_mod(gmpy2.mul(blinding_pairs[0][1], w1), p)
        h2w2 = gmpy2.f_mod(gmpy2.mul(blinding_pairs[1][1], w2), p)

        # Cloud compute
        w1x1 = gmpy2.powmod(w1, x1, p)
        h1w1t1y1 = gmpy2.powmod(h1w1, t1y1, p)
        w2x2 = gmpy2.powmod(w2, x2, p)
        h2w2t2y2 = gmpy2.powmod(h2w2, t2y2, p)

        # Verification
        real_answer = gmpy2.f_mod(gmpy2.mul(w1x1, blinding_pairs[2][1]), p)
        real_answer = gmpy2.f_mod(gmpy2.mul(real_answer, h1w1t1y1), p)
        verification = gmpy2.f_mod(gmpy2.mul(w2x2, blinding_pairs[3][1]), p)
        verification = gmpy2.f_mod(gmpy2.mul(verification, h2w2t2y2), p)
        real = gmpy2.powmod(u1, a1, p)
        if real_answer == real:
            print("Real answer is right!")
        #print(real)
        ans = gmpy2.powmod(real_answer, r, p)
        #print(ans)
        #ans = real_answer
        if ans == verification:
            print("Right Answer!")
        else:
            print("Wrong Answer!")


if __name__ == "__main__":
    p = gmpy2.mpz(
        281878283546411134331955053915719078231298790298153670604738367255324835663025510192086892441535016481116338563638344784808982357501005264068784771242695427024340056890189080913241880334753875579302434068869289045538220269912981798151095757328017107872133600753431315640237281631536195165981838724850783448162913)
    q = gmpy2.mpz(
        179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137859)
    u1 = gmpy2.mpz(
        93335961247381333622948086567469035919897422875673769285617485691513550631500202812931576004542073287485376630916307088361801383038384057561565819161703979573113800759009783073515401144515476530669485458019737020553072834988501503944918367822567461547462476061086861281813129544650265044766153907288416469786580)
    a1 = gmpy2.mpz(
        123754834094517264786251613465163955329118838291911092349429048166615726908463192259531999898195839643729638854959475797185234487594815622208075506633961477446217636996304078545523387538944174707028468897255828437774652167526383541712411125502362345275266360538349268189936548024732341143025040327088953139021)

    u = []
    u1 = mpz(pow(u1,mpz(div(p,q-1)),p))
    u.append(u1)
    a = []
    a.append(a1)

    Exp(u,a,p,q)
"""
r = 9
real:65198125551157851040047117901326940796668407819971663731705946559112112925840067372641764076162950836695193576852840348314062795821189854530698548759483882638886484278911895233062530758356385148002681132354806004168819764593678029393245165335116210157147502289690981173259310971850928721965837170448231042482018

verify:55543189065326500947025307327243992407738722204089820036392224037408874948993521145941883108762546040973541817168204711052714133107050541270420514374401344573165597870031832033436793146631392280849478196126594578834355872718368111345805382582120902544723223480539944919452292732705655741147672230574030483277920
"""